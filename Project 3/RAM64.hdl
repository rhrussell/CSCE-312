//Name: Ryan Russell
//UIN: 227006614

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */
 
 // CREATE THE RAM 64 using RAM8 Modules

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
        DMux8Way(in=load,sel=address[3..5],a=in8reg0,b=in8reg1,c=in8reg2,d=in8reg3,e=in8reg4,f=in8reg5,g=in8reg6,h=in8reg7);
        RAM8(in=in,load=in8reg0,address=address[0..2],out=out8reg0);
        RAM8(in=in,load=in8reg1,address=address[0..2],out=out8reg1);
        RAM8(in=in,load=in8reg2,address=address[0..2],out=out8reg2);
        RAM8(in=in,load=in8reg3,address=address[0..2],out=out8reg3);
        RAM8(in=in,load=in8reg4,address=address[0..2],out=out8reg4);
        RAM8(in=in,load=in8reg5,address=address[0..2],out=out8reg5);
        RAM8(in=in,load=in8reg6,address=address[0..2],out=out8reg6);
        RAM8(in=in,load=in8reg7,address=address[0..2],out=out8reg7);
        Mux8Way16(a=out8reg0,b=out8reg1,c=out8reg2,d=out8reg3,e=out8reg4,f=out8reg5,g=out8reg6,h=out8reg7,sel=address[3..5],out=out);
}